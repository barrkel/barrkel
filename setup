#!/bin/bash

# we will be dealing with lots of .files, reduce risk of missing some
shopt -s dotglob

function die # message
{
    echo "$@" >/dev/stderr
    exit 1
}

function log # message
{
    echo "$@" >/dev/stderr
}

function usage
{
    echo "usage: $(basename $0) [<flags>]"
    echo "Sets up barrkel in home ($(cd ~; pwd))"
    echo "flags:"
    echo "  -q  Don't prompt on startup"
    echo "  -c  Continue even if cached config is different"
    echo "  -a  Apply after staging"
    echo "  -f  Overwrite existing files when applying staged home directory"
    exit 1
}

function maybe_echo_dir # dir...
{
    local dir
    for dir; do
        test -d "$dir" && echo "$dir"
    done
}

function get_atom_dirs
{
    maybe_echo_dir "$barrkel/host/$hostname"
    test -f "$barrkel/config/$hostname" || return
    cat "$barrkel/config/$hostname" |
        while read -r line; do
            if [ -d "$barrkel/base/$line" ]; then
                echo "$barrkel/base/$line"
            else
                log "warning: $barrkel/base/$line doesn't exist"
            fi
        done
}

function gather_vars # args
{
    barrkel=$(cd "$(dirname $0)"; pwd)
    
    cd "$barrkel" || die "could not chdir to '$barrkel'"
    hostname=$(hostname)
    test -n "$hostname" || die "could not discover hostname"

    atoms=($(get_atom_dirs))

    do_apply=0
    no_prompt=0
    force_overwrite=0
    ignore_diff=0
    
    while [ -n "$1" ]; do
        case "$1" in
            -a)
                do_apply=1
                ;;
            -q)
                no_prompt=1
                ;;
           	-f)
                force_ovewrite=1
                ;;
            -c)
                ignore_diff=1
                ;;

            *)
                usage
                ;;
        esac
        shift
    done

    cache="$barrkel/cache"
    staging="$barrkel/staging"
}

function ensure_mkdir # directory...
{
    local dir
    for dir; do
        test -d "$dir" && continue
        echo "Creating $dir"
        mkdir -p "$dir" || die "Could not create '$dir'"
    done
}

function ensure_sanity
{
    test -f "$barrkel/config/$hostname" || die "Please create host config file '$barrkel/config/$hostname'"
    ensure_mkdir "$barrkel/host/$hostname/"{bin,home,home.d}

    echo "Removing $staging"
    rm -rf "$staging" || die "Couldn't remove '$staging'"
    ensure_mkdir "$staging"
}

function verify_no_change
{
    # Verify that nothing has changed
    echo "Checking cache"
    test -d "$cache" || {
        echo "No cache dir"
        return
    }
    
    cd "$cache" || die "Couldn't chdir to '$cache'"
    find -type f | while read -r line; do
        # don't mind if file is missing
        echo "Cache: checking $line"
        test -f "$HOME/$line" || {
            echo "Cache: $HOME/$line does not exist, skipping"
            continue
        }
        diff -u -- "$line" "$HOME/$line" || (( ignore_diff)) || die "Exiting due to differences from cached config"
    done || exit 1
}

function find_in_atom_dirs # relative-path
{
    get_atom_dirs | (
        while read -r line; do
            test -e "$line/$1" && {
                echo "$line/$1"
                exit
            }
        done
        exit 1
    ) && return

    tried_dirs=($(get_atom_dirs))
    die "couldn't find path '$1' in any profile directory, tried: ${tried_dirs[@]}"
}

function build_initial_profile
{
    local _utils=$(find_in_atom_dirs bin/_barrkel_utils) || exit
    printf 'export BARRKEL_PROFILE=1\n'                             >  "$staging/.bash_profile"
    printf 'source ~/.bashrc\n'                                     >> "$staging/.bash_profile"

    printf 'export BARRKEL_HOME='%s'\n' "$barrkel"                  >  "$staging/.bashrc"
    printf "source '%s'\\n" "$_utils"                               >> "$staging/.bashrc"
    printf '[[ -z "$BARRKEL_PROFILE" ]] && source ~/.bash_profile\n' >> "$staging/.bashrc"
}

function symlink_files # from-dir to-dir
{
    local from_dir="$1"
    local to_dir="$2"
    local f

    for f in "$from_dir"/*; do
        test -e "$f" || continue
        
        case "$f" in
            *~)
                continue
                ;;
            \#*#)
                continue
                ;;
        esac

        test -f "$to_dir/${f##*/}" && {
            echo "note: skipping less specific: $f"
            continue
        }
        echo "Symlinking $f into $to_dir"
        ln -s "$f" "$to_dir"
    done
}

function copy_parts # from-dir to-dir
{
    local from_dir="$1"
    local to_dir="$2"
    local f
    local name
    
    for f in "$from_dir"/*; do
        name="${f##*/}"
        test -f "$f" && {
            # ultra-simple case: a single file, concatenate
            # be sure we have line endings though
            printf '\n' >> "to_dir/$name"
            cat "$f" >> "$to-dir/$name"
        }
    done
}

function echo_if_file_exists # filename...
{
    local arg
    for arg; do
        test -f "$arg" && echo "$arg"
        shift
    done
}

# <part-filename> \t <target-filename> \t <path>
function list_all_part_files_for # dir
{
    local curr="$1"
    
    test -d "$curr/home.d" && {
        cd "$curr/home.d"
        for f in *; do
            if [ -f "$f" ]; then
                printf '%s\t%s\t%s\n' "50_$f" "$f" "$curr/home.d/$f"
            elif [ -d "$f" ]; then
                part_dir="$curr/home.d/$f"
                (
                    cd "$f"
                    
                    for ff in *; do
                        test -f "$ff" || die "non-file found in part dir: $part_dir/$ff"
                        printf '%s\t%s\t%s\n' "$ff" "$f" "$part_dir/$ff"
                    done
                ) || exit
            fi
        done
    }

    test -f "$curr/profile" && {
        printf '%s\t%s\t%s\n' '++bash_profile' '.bash_profile' "$curr/profile"
    }
    
    test -f "$curr/rc" && {
        printf '%s\t%s\t%s\n'     '++bashrc'       '.bashrc'       "$curr/rc"
    }
}

# output table of all parts for a given filename
# <part-filename> \t <target-filename> \t <path>
function list_all_part_files
{
    local atom

    for atom in "${atoms[@]}"; do
        list_all_part_files_for "$atom"
    done
}

function add_chunk # source-file target-file
{
    echo "Appending $1 to $2"
    case "$2" in
        */.bashrc | */.bash_profile)
            echo "# from $1" >> "$2"
            ;;
    esac
    cat "$1" >> "$2"
}

function build_staging
{
    build_initial_profile
    local atom i

    # atoms go from more specific to less specific
    # but when building path, prepend in order from less specific to more specific
    for ((i=${#atoms[@]} - 1; i >= 0; --i)) {
        atom="${atoms[i]}"
        # path
        test -d "$atom/bin" && echo "pathlist_prepend PATH $atom/bin" >> "$staging/.bash_profile"
    }
    for atom in "${atoms[@]}"; do

        # symlinks
        test -d "$atom/home" && symlink_files "$atom/home" "$staging"
    done

    # parts
    (
        # include definition of add_chunk function in piped bash
        type add_chunk | tail -n +2
        
        list_all_part_files | sort | sed -r 's|(.*)\t(.*)\t(.*)|add_chunk "\3" "$staging/\2"|'
    ) | ( export staging; bash )
}

function apply_file # from to
{
    if [ -e "$2" ]; then
        if (( force_ovewrite )); then
            echo "Obliterating $2"
            echo rm -rf "$2"
            rm -rf "$2"
        else
            echo rm -i -rf "$2"
            rm -i -rf "$2"
        fi
    fi || exit 1
    echo cp -r "$1" "$2"
    cp -r "$1" "$2"
}

function apply_staging
{
    (
        cd "$staging"
        for f in *; do
            apply_file "$f" "$HOME/$f" || exit 1
        done
    ) || die "failed while applying"
    test -d "$barrkel/cache.old" && rm -rf "$barrkel/cache.old"
    test -d "$barrkel/cache" && mv "$barrkel/cache" "$barrkel/cache.old"
    cp -rP "$staging" "$barrkel/cache"
}

gather_vars "$@"

(( no_prompt )) || {
    echo "This will set up the barrkel home directory system using '$barrkel' as the barrkel home directory"
    echo "Press Enter to continue, or run this script as '$(basename $0) -q' to avoid this prompt"
    read
}

ensure_sanity

build_staging

(( do_apply )) && {
    verify_no_change || die "Failure during verification"
    apply_staging
}


