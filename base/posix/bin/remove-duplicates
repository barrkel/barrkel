#!/bin/bash

function usage
{
    echo "usage: $(basename $0) [-f] [-d <directory>] <directory>... "
    echo "Looks for files in the directories and removes duplicates."
    echo "By default duplicates are put into a 'dups' directory off the current directory."
    echo "  -f    Removes files rather than putting them in a 'dups' directory."
    echo "  -d <directory> Change the target directory to move duplicates to."
    exit 1
}

if [ -z "$1" ]; then
    usage
fi

DIR=""
DELETE="no"
DUPS_DIR="$(pwd)/dups"

function die
{
    echo "$(basename $0): $1"
    exit 1
}

function found_duplicate
{
    echo "'$1' is duplicate of '$2'."
    if [ $DELETE = "yes" ]; then
        rm -f -- "$1" || die "Couldn't remove '$1'."
    else
        if [ ! -d "$DUPS_DIR" ]; then
            mkdir -- "$DUPS_DIR" || die "Couldn't create '$DUPS_DIR'."
        fi
        mv -- "$1" "$DUPS_DIR" || die "Couldn't move '$1' to '$DUPS_DIR'."
    fi
}

while [ ! -z "$1" ]; do
    case "$1" in
        -h | -\?)
            usage
            ;;
        
        -f)
            DELETE="yes"
            ;;
            
        -d)
            shift
            test -z "$1" && die "'-d' requires an argument, the target directory."
            DUPS_DIR="$1"
            ;;
            
        *)
            (
                cd "$1" || die "Couldn't cd to '$1'"
                
                sizes=$(mktemp)
                # this will remove duplicate links as well as merely files
                find -maxdepth 1 -type f -o -type l | print0 |
                    du -l -b --files0-from - | sort -n > $sizes

                find-duplicates -t "$sizes" |
                    while read -r line; do
                        dup="${line/	*/}"
                        orig="${line/*	/}"
                        found_duplicate "$dup" "$orig"
                    done
                
                rm $sizes
                
                # Doesn't necessarily find all duplicates. Sorted by size,
                # there may be a sequence 'a b a', where a == a won't be found.
                #prev=""
                #ls -S |
                #   while read -r f; do
                #       if [ ! -f "$f" ]; then
                #           continue
                #       fi
                #       
                #       if [ ! -z "$prev" ]; then
                #           if diff -- "$f" "$prev" >/dev/null; then
                #               found_duplicate "$f" "$prev"
                #           else
                #               prev="$f"
                #           fi
                #       else
                #           prev="$f"
                #       fi
                #   done
            )
            ;;
    esac
    
    shift
done

