#!/bin/bash # not really, use . or source

# - executed before profile, so be careful

# Usage: array_add <varName> <value>
function array_add
{
    local cmd
    local var
    local value
    
    test -n "$1" || {
        echo "usage: array_add <varName> <value>..."
        echo "Adds values to the array shell variable varName."
        return 1
    }
    
    var="$1"
    shift
	
    while [ -n "$1" ]; do
        # Put into named variable for replacements.
        value="$1"
        # We need to use " rather than ' because we can't
        # escape ' itself; however, this means we need to escape all the
        # other things that would otherwise get through
        # Double-escape backslashes
        value="${value//\\/\\\\}"
        # Escape $
        value="${value//\$/\\\$}"
        # Escape "
        value="${value//\"/\\\"}"
        # Create assignment command
        cmd=$var'[${#'$var'[@]}]="'"$value"'"'
        # echo 'cmd='"$cmd"
        eval -- "$cmd"
        shift
    done
}

# Usage: array_pop <varName>
function array_pop
{
    local cmd
    local var
    local lastIndex
    
    test -n "$1" || {
        echo "usage: array_pop <varName>"
        echo "Removes the last element in array shell variable varName."
        return 1
    }
    
    var="$1"
    
    cmd='lastIndex=${#'$var'[*]}'
    eval -- "$cmd"
    
    let --lastIndex
    
    cmd='unset '$var'['$lastIndex']'
#    echo $cmd
    eval -- "$cmd"
}

function array_get_last # varName
{
    local cmd
    local var
    local lastIndex
    
    test -n "$1" || {
        echo "usage: array_get_last <varName>"
        echo "Prints last element in array shell variable varName."
        return 1
    }
    
    var="$1"
    
    cmd='lastIndex=${#'$var'[*]}'
    eval -- "$cmd"
    
    let --lastIndex
    
    cmd='echo ${'$var'['$lastIndex']}'
    eval -- "$cmd"
}

function array_copy # from to
{
    local cmd
    local from
    local to
    local i
    local count
    local toCount
    
    test -n "$1" -a -n "$2" || {
        echo "usage: array_copy <from> <to>"
        echo "Copies contents of 'from' array to 'to' array."
        return 1
    }
    
    from="$1"
    to="$2"
    
    cmd='count=${#'$from'[@]}'
    eval -- "$cmd"
    
    eval -- 'toCount=${#'$to'[@]}'
    for ((i=0; i < toCount; ++i)); do
        eval -- 'unset '$to'['$i']'
    done
    
    for ((i=0;i<count;++i)); do
        # we want roughly: foo[24]="${bar[24]}"
        cmd=$to'['$i']="${'$from'['$i']}"'
        # Double-escape backslashes
        cmd="${cmd//\\/\\\\}"
        # echo "$cmd"
        eval -- "$cmd"
    done
}

