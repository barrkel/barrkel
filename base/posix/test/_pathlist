#!/bin/bash

source ../bin/_pathlist

assert_count=0
fail_count=0

################################################################################
# Helpers
################################################################################

function eq # value1 value2
{
    let ++assert_count
    [[ "$1" == "$2" ]] || {
        echo "fail: '$1' != '$2'"
        let ++fail_count
        return 1
    }
}

function eqa # array values...
{
    local array array_name

    array_name="$1"
    array_copy "$1" array
    shift

    let ++assert_count

    [[ "${#array[@]}" == "$#" ]] || {
        let ++fail_count
        echo "fail: count of $array_name ${#array[@]} != $# expected"
        return 1
    }
    local value index
    for value in "${array[@]}"; do
        let ++index
        [[ "$value" == "$1" ]] || {
            let ++fail_count
            echo "fail: $array_name[$index] != '$1' expected (is: '$value')"
            return 1
        }
        shift
    done
}

function assert # command
{
    let ++assert_count

    "$@" || {
        let ++fail_count
        echo "fail: not true: $@"
        return 1
    }
}

function deny # command
{
    let ++assert_count

    "$@" && {
        let ++fail_count
        echo "fail: should be false: $@"
        return 1
    }
}

function finish
{
    echo "$assert_count assertions made, $fail_count failures"
    return $(( fail_count > 0 ))
}

function run # command
{
    local start=$fail_count
    "$@"
    (( fail_count > start )) && {
        echo "*** failed in $1"
    }
}

################################################################################
# TESTS
################################################################################

function test_eqa
{
    local x=(1 2)
    eqa x 1 2
    x=("'" '\')
    eqa x "'" '\'
}

function test_array_add
{
    local x=(1 2)

    array_add x 10
    eqa x 1 2 10

    x=('a' 'b')
    array_add x 1 2
    eqa x a b 1 2

    x=('a b')
    array_add x ' c d '
    eqa x 'a b' ' c d '

    x=('a')
    array_add x "qu'ted"
    eqa x 'a' "qu'ted"

    x=('a')
    array_add x '' 'b'
    eqa x 'a' '' 'b'
}

function test_setq
{
    local x=foo

    # plain
    setq x bar
    eq "$x" "bar"

    # spaces
    setq x 'bar baz'
    eq "$x" 'bar baz'

    # mixed quotes
    setq x '"quoted" value uneven"'
    eq "$x" '"quoted" value uneven"'

    setq x "other'quotes\"mixed'"
    eq "$x" "other'quotes\"mixed'"

    setq x "\`foo' \`bar'"
    eq "$x" "\`foo' \`bar'"

    # $ expansions
    setq x '$(basename $0)'
    eq "$x" '$(bas''ename $0)'

    setq x '$PATH'
    eq "$x" '$P''ATH'

    # backslashes
    setq x '\\\'
    eq "$x" '\\\'

    setq x '\'
    eq "$x" '\'

    # odd characters
    setq x 'RET
URN'
    eq "$x" 'RET
URN'

    setq x 'TAB	CHAR'
    eq "$x" 'TAB	CHAR'
}

function test_array_contains
{
    local x=(1 2 3)

    assert array_contains x 1
    assert array_contains x 2
    assert array_contains x 3
    deny array_contains x 0

    x=("'" '"' '$')
    assert array_contains x "'"
    assert array_contains x '"'
    assert array_contains x '$'
    deny array_contains x '$foo'
    deny array_contains x '`'
}

function test_array_index_of
{
    local x=(a b c)
    local r

    array_index_of x a r
    eq $r 0
    array_index_of x b r
    eq $r 1
    array_index_of x c r
    eq $r 2

    x=("'" '\' '' "$")
    array_index_of x "'" r
    eq $r 0
    array_index_of x '\' r
    eq $r 1
    array_index_of x '' r
    eq $r 2
    array_index_of x "$" r
    eq $r 3
}

function test_array_pop
{
    local x=(1 2 3)

    eqa x 1 2 3
    
    array_pop x
    eqa x 1 2

    array_pop x
    eqa x 1

    array_pop x
    eqa x
}

function test_array_last
{
    local x=(1)
    local r

    x+=(2)
    array_last x r
    eq "$r" 2

    x+=(e e '"')
    array_last x r
    eq "$r" '"'
    
    x+=(e "'")
    array_last x r
    eq "$r" "'"

    x+=('')
    array_last x r
    eq "$r" ''
}

function test_array_copy
{
    local x=(1 2 '"' "'")
    local y

    array_copy x y
    eqa y "${x[@]}"
}


function test_array_swap_elements
{
    local x=(1 2 3)

    array_swap_elements x 0 1
    eqa x 2 1 3

    x=(a b c)
    array_swap_elements x 0 2
    eqa x c b a
}

function test_string_split
{
    local r

    string_split "foo bar baz" ' ' r
    eqa r foo bar baz

    string_split "a;b;c" ';' r
    eqa r a b c

    string_split 'f\oo\;bar;baz blah;bing' ';' r
    eqa r 'f\oo\' 'bar' 'baz blah' 'bing'
}

function test_array_join
{
    local r

    x=(1 2 3)
    array_join x ',' r
    eq '1,2,3' "$r"

    x=("foo" 'b\a\r' '$blah')
    array_join x ';' r
    eq 'foo;b\a\r;$blah' "$r"
}

function test_array_delete
{
    local x=(1 2 3)
    
    array_delete x 0
    eqa x 2 3

    x=(a b c d e)
    array_delete x 4
    eqa x a b c d

    array_delete x 2
    eqa x a b d
}

function test_array_insert
{
    local x=(1 2 3)
    
    array_insert x 0 a
    eqa x a 1 2 3

    x=(1 2 3)
    array_insert x 1 a
    eqa x 1 a 2 3

    x=(1 2 3)
    array_insert x 3 a
    eqa x 1 2 3 a

    x=(1 2 3)
    array_insert x 0 a b c
    eqa x a b c 1 2 3
}

function test_array_remove
{
    local x

    x=(a 1 2 b 3 c)
    array_remove x a b c
    eqa x 1 2 3

    x=(1 2 3)
    array_remove x 2
    eqa x 1 3

    x=(a '' b '"' c)
    array_remove x ''
    eqa x a b '"' c

    array_remove x '"'
    eqa x a b c

    x+=('')
    eqa x a b c ''
    array_remove x ''
    eqa x a b c
}

function test_pathlist_append
{
    local x=foo:bar:baz

    pathlist_append x blah
    eq "$x" foo:bar:baz:blah

    x=a:b
    pathlist_append x c d e
    eq "$x" a:b:c:d:e
}

function test_pathlist_prepend
{
    local x=foo:bar:baz

    pathlist_prepend x bar
    eq "$x" foo:bar:baz

    x=a:b:c
    pathlist_prepend x d
    eq "$x" d:a:b:c

    x=a:b:c
    pathlist_prepend x d a 1 b 2 c
    eq "$x" d:1:2:a:b:c
}

function test_pathlist_ensure_prepending
{
    local x=a:b:c:d

    pathlist_ensure_prepending x d
    eq "$x" d:a:b:c

    pathlist_ensure_prepending x c b a
    eq "$x" c:b:a:d
}

################################################################################
# BODY
################################################################################

run test_eqa
run test_setq
run test_array_add
run test_array_contains
run test_array_index_of
run test_array_pop
run test_array_last
run test_array_copy
run test_array_join
run test_array_swap_elements
run test_array_delete
run test_array_insert
run test_array_remove
run test_string_split

run test_pathlist_append
run test_pathlist_prepend
run test_pathlist_ensure_prepending

finish

